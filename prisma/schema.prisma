generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model client {
  id                     String                   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description            String?                  @db.VarChar(255)
  image                  String?                  @db.VarChar(255)
  name                   String                   @db.VarChar(255)
  created_at             DateTime                 @default(now()) @db.Timestamp(6)
  updated_at             DateTime                 @default(now()) @db.Timestamp(6)
  user_id                String                   @db.Uuid
  tenant_id              String                   @db.VarChar(255)
  user                   user                     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  performance_evaluation performance_evaluation[]
  time_tracking          time_tracking[]
}

model invitation {
  id                               String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  inviter_id                       String?  @db.Uuid
  invitee_id                       String?  @db.Uuid
  created_at                       DateTime @default(now()) @db.Timestamp(6)
  updated_at                       DateTime @default(now()) @db.Timestamp(6)
  user_invitation_invitee_idTouser user?    @relation("invitation_invitee_idTouser", fields: [invitee_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user_invitation_inviter_idTouser user?    @relation("invitation_inviter_idTouser", fields: [inviter_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model performance_evaluation {
  id               String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id          String?  @db.Uuid
  client_id        String?  @db.Uuid
  evaluation_score Int
  created_at       DateTime @default(now()) @db.Timestamp(6)
  updated_at       DateTime @default(now()) @db.Timestamp(6)
  client           client?  @relation(fields: [client_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user             user?    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model time_tracking {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id    String?  @db.Uuid
  client_id  String?  @db.Uuid
  time_spent Int
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  client     client?  @relation(fields: [client_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user       user?    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id                                     String                   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email                                  String                   @unique @db.VarChar(255)
  firstName                              String?                  @db.VarChar(255)
  lastName                               String?                  @db.VarChar(255)
  roq_user_id                            String                   @db.VarChar(255)
  tenant_id                              String                   @db.VarChar(255)
  created_at                             DateTime                 @default(now()) @db.Timestamp(6)
  updated_at                             DateTime                 @default(now()) @db.Timestamp(6)
  client                                 client[]
  invitation_invitation_invitee_idTouser invitation[]             @relation("invitation_invitee_idTouser")
  invitation_invitation_inviter_idTouser invitation[]             @relation("invitation_inviter_idTouser")
  performance_evaluation                 performance_evaluation[]
  time_tracking                          time_tracking[]
}
